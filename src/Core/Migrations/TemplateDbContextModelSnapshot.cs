// <auto-generated />
using System;
using Core.Services;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Core.Migrations
{
    [DbContext(typeof(TemplateDbContext))]
    partial class TemplateDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Core.Models.Feria", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataFine")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataInizio")
                        .HasColumnType("datetime2");

                    b.Property<string>("Dettagli")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Durata")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Ferie");

                    b.HasData(
                        new
                        {
                            Id = new Guid("dd415088-2d31-41c9-95d4-467eb7b168ed"),
                            DataFine = new DateTime(2024, 2, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataInizio = new DateTime(2024, 2, 1, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            Dettagli = "Dettagli di Ferie",
                            Durata = 60
                        });
                });

            modelBuilder.Entity("Core.Models.NotteFuori", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Commessa")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Data")
                        .HasColumnType("datetime2");

                    b.Property<string>("Dettagli")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TipoViaggio")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("NottiFuori");
                });

            modelBuilder.Entity("Core.Models.Permesso", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Data")
                        .HasColumnType("datetime2");

                    b.Property<string>("Dettagli")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Durata")
                        .HasColumnType("int");

                    b.Property<DateTime>("OraFine")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("OraInizio")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Permessi");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4b422ac4-1b1e-4a9c-bb02-9e73fd70c3c3"),
                            Data = new DateTime(2024, 1, 29, 14, 0, 0, 0, DateTimeKind.Unspecified),
                            Dettagli = "Dettagli di permesso",
                            Durata = 180,
                            OraFine = new DateTime(2024, 1, 29, 17, 0, 0, 0, DateTimeKind.Unspecified),
                            OraInizio = new DateTime(2024, 1, 29, 14, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Core.Models.Rendicontazione", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Commessa")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Data")
                        .HasColumnType("datetime2");

                    b.Property<string>("Dettagli")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OraFine")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("OraInizio")
                        .HasColumnType("datetime2");

                    b.Property<int>("OreTotali")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Rendicontazioni");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a5e23dcc-d26a-4c66-a5bc-a7529b89db14"),
                            Commessa = "Commessa di rendicontazione",
                            Data = new DateTime(2024, 1, 29, 8, 30, 0, 0, DateTimeKind.Unspecified),
                            Dettagli = "Dettagli di Rendicontazioni",
                            OraFine = new DateTime(2024, 1, 29, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            OraInizio = new DateTime(2024, 1, 29, 8, 30, 0, 0, DateTimeKind.Unspecified),
                            OreTotali = 8
                        });
                });

            modelBuilder.Entity("Core.Models.Rimborso", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("CartaAziendale")
                        .HasColumnType("bit");

                    b.Property<string>("Commessa")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Data")
                        .HasColumnType("datetime2");

                    b.Property<string>("Dettagli")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Importo")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Rimborsi");
                });

            modelBuilder.Entity("Core.Models.Trasferta", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("AutoAziendale")
                        .HasColumnType("bit");

                    b.Property<int>("Chilometri")
                        .HasColumnType("int");

                    b.Property<string>("Commessa")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DataFine")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataInizio")
                        .HasColumnType("datetime2");

                    b.Property<string>("Dettagli")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Trasferte");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2b7f6f04-88c3-4abb-9b81-390a75e6973d"),
                            AutoAziendale = false,
                            Chilometri = 200,
                            Commessa = "Commessa di Trasferte",
                            DataFine = new DateTime(2024, 1, 28, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            DataInizio = new DateTime(2024, 1, 27, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            Dettagli = "Dettagli di Trasferte"
                        });
                });

            modelBuilder.Entity("Core.Models.VueCalEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("AllDay")
                        .HasColumnType("bit");

                    b.Property<bool?>("Background")
                        .HasColumnType("bit");

                    b.Property<string>("Class")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Deletable")
                        .HasColumnType("bit");

                    b.Property<DateTime>("End")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("Resizable")
                        .HasColumnType("bit");

                    b.Property<string>("Split")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Start")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Eventi");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5756b08c-2a5c-4cb5-b3e6-43b0fc2efb98"),
                            AllDay = false,
                            Background = false,
                            Class = "rendicontazione",
                            Deletable = false,
                            End = new DateTime(2024, 1, 29, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            Resizable = false,
                            Split = "",
                            Start = new DateTime(2024, 1, 29, 8, 30, 0, 0, DateTimeKind.Unspecified),
                            Title = "Prova rendicontazione"
                        },
                        new
                        {
                            Id = new Guid("edf34801-4ae1-48ca-9d01-651d15d63f40"),
                            AllDay = false,
                            Background = false,
                            Class = "permesso",
                            Deletable = false,
                            End = new DateTime(2024, 1, 29, 17, 0, 0, 0, DateTimeKind.Unspecified),
                            Resizable = false,
                            Split = "",
                            Start = new DateTime(2024, 1, 29, 14, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Prova permesso"
                        },
                        new
                        {
                            Id = new Guid("6467ba2c-4de7-4533-9207-0047150128a0"),
                            AllDay = false,
                            Background = false,
                            Class = "trasferta",
                            Deletable = false,
                            End = new DateTime(2024, 1, 28, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            Resizable = false,
                            Split = "",
                            Start = new DateTime(2024, 1, 27, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Prova trasferta"
                        },
                        new
                        {
                            Id = new Guid("9bc6f3d5-9fa2-4e9b-9922-09540e41dda8"),
                            AllDay = false,
                            Background = false,
                            Class = "straordinario",
                            Deletable = false,
                            End = new DateTime(2024, 1, 29, 22, 0, 0, 0, DateTimeKind.Unspecified),
                            Resizable = false,
                            Split = "",
                            Start = new DateTime(2024, 1, 29, 19, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Prova straordinario"
                        },
                        new
                        {
                            Id = new Guid("8ebded23-b951-440c-a7bb-0fae54eaa740"),
                            AllDay = true,
                            Background = true,
                            Class = "libero",
                            Deletable = false,
                            End = new DateTime(2024, 2, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Resizable = false,
                            Split = "",
                            Start = new DateTime(2024, 2, 1, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Prova feria"
                        });
                });

            modelBuilder.Entity("Core.Services.Shared.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NickName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3de6883f-9a0b-4667-aa53-0fbc52c4d300"),
                            Email = "email1@test.it",
                            FirstName = "Nome1",
                            LastName = "Cognome1",
                            NickName = "Nickname1",
                            Password = "M0Cuk9OsrcS/rTLGf5SY6DUPqU2rGc1wwV2IL88GVGo="
                        },
                        new
                        {
                            Id = new Guid("a030ee81-31c7-47d0-9309-408cb5ac0ac7"),
                            Email = "email2@test.it",
                            FirstName = "Nome2",
                            LastName = "Cognome2",
                            NickName = "Nickname2",
                            Password = "Uy6qvZV0iA2/drm4zACDLCCm7BE9aCKZVQ16bg80XiU="
                        },
                        new
                        {
                            Id = new Guid("bfdef48b-c7ea-4227-8333-c635af267354"),
                            Email = "email3@test.it",
                            FirstName = "Nome3",
                            LastName = "Cognome3",
                            NickName = "Nickname3",
                            Password = "Uy6qvZV0iA2/drm4zACDLCCm7BE9aCKZVQ16bg80XiU="
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
