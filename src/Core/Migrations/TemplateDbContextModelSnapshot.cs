// <auto-generated />
using System;
using Core.Services;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Core.Migrations
{
    [DbContext(typeof(TemplateDbContext))]
    partial class TemplateDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Core.Models.Feria", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataFine")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataInizio")
                        .HasColumnType("datetime2");

                    b.Property<string>("Dettagli")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Durata")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Ferie");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1b75d75e-b75a-41d4-bbad-d2b2622b8dd3"),
                            DataFine = new DateTime(2024, 1, 19, 23, 59, 0, 0, DateTimeKind.Unspecified),
                            DataInizio = new DateTime(2024, 1, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Dettagli = "Vacanza",
                            Durata = 3
                        });
                });

            modelBuilder.Entity("Core.Models.NotteFuori", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Commessa")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Data")
                        .HasColumnType("datetime2");

                    b.Property<string>("Dettagli")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TipoViaggio")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("NottiFuori");
                });

            modelBuilder.Entity("Core.Models.Permesso", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Data")
                        .HasColumnType("datetime2");

                    b.Property<string>("Dettagli")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OraFine")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("OraInizio")
                        .HasColumnType("datetime2");

                    b.Property<int>("OreTotali")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Permessi");

                    b.HasData(
                        new
                        {
                            Id = new Guid("eea1f511-111c-41a6-9905-c3b06b88c952"),
                            Data = new DateTime(2024, 1, 15, 14, 0, 0, 0, DateTimeKind.Unspecified),
                            Dettagli = "Personali",
                            OraFine = new DateTime(2024, 1, 15, 16, 0, 0, 0, DateTimeKind.Unspecified),
                            OraInizio = new DateTime(2024, 1, 15, 14, 0, 0, 0, DateTimeKind.Unspecified),
                            OreTotali = 120
                        });
                });

            modelBuilder.Entity("Core.Models.Rendicontazione", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Commessa")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Data")
                        .HasColumnType("datetime2");

                    b.Property<string>("Dettagli")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OraFine")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("OraInizio")
                        .HasColumnType("datetime2");

                    b.Property<int>("OreTotali")
                        .HasColumnType("int");

                    b.Property<bool>("Straordinario")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Rendicontazioni");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5ce24d8d-38d4-4efe-b53e-2f82c236bb35"),
                            Commessa = "Sistemazione",
                            Data = new DateTime(2024, 1, 8, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            Dettagli = "Sistemato un problema del cliente",
                            OraFine = new DateTime(2024, 1, 8, 13, 0, 0, 0, DateTimeKind.Unspecified),
                            OraInizio = new DateTime(2024, 1, 8, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            OreTotali = 4,
                            Straordinario = false
                        },
                        new
                        {
                            Id = new Guid("b3ca179a-d061-4fb9-a3db-fc9a5154b61b"),
                            Commessa = "Sistemazione",
                            Data = new DateTime(2024, 1, 8, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            Dettagli = "Sistemato un problema del cliente",
                            OraFine = new DateTime(2024, 1, 8, 18, 0, 0, 0, DateTimeKind.Unspecified),
                            OraInizio = new DateTime(2024, 1, 8, 14, 0, 0, 0, DateTimeKind.Unspecified),
                            OreTotali = 4,
                            Straordinario = false
                        },
                        new
                        {
                            Id = new Guid("dad29b8d-9c34-4721-81f2-e289c3c82633"),
                            Commessa = "Lavoro",
                            Data = new DateTime(2024, 1, 9, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            Dettagli = "Lavoro per un progetto",
                            OraFine = new DateTime(2024, 1, 9, 13, 0, 0, 0, DateTimeKind.Unspecified),
                            OraInizio = new DateTime(2024, 1, 9, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            OreTotali = 4,
                            Straordinario = false
                        },
                        new
                        {
                            Id = new Guid("5ffb43c1-9bd0-4752-951b-508f2293b7a6"),
                            Commessa = "Lavoro",
                            Data = new DateTime(2024, 1, 9, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            Dettagli = "Lavoro per un progetto",
                            OraFine = new DateTime(2024, 1, 9, 18, 0, 0, 0, DateTimeKind.Unspecified),
                            OraInizio = new DateTime(2024, 1, 9, 14, 0, 0, 0, DateTimeKind.Unspecified),
                            OreTotali = 4,
                            Straordinario = false
                        });
                });

            modelBuilder.Entity("Core.Models.Rimborso", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("CartaAziendale")
                        .HasColumnType("bit");

                    b.Property<string>("Commessa")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Data")
                        .HasColumnType("datetime2");

                    b.Property<string>("Dettagli")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Importo")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Rimborsi");
                });

            modelBuilder.Entity("Core.Models.Trasferta", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("AutoAziendale")
                        .HasColumnType("bit");

                    b.Property<int>("Chilometri")
                        .HasColumnType("int");

                    b.Property<string>("Commessa")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DataFine")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataInizio")
                        .HasColumnType("datetime2");

                    b.Property<string>("Dettagli")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OraFine")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("OraInizio")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Trasferte");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c08e3de1-e26b-4f01-81f0-fbca477186e3"),
                            AutoAziendale = false,
                            Chilometri = 200,
                            Commessa = "Aggiornamento",
                            DataFine = new DateTime(2024, 1, 16, 22, 0, 0, 0, DateTimeKind.Unspecified),
                            DataInizio = new DateTime(2024, 1, 16, 14, 0, 0, 0, DateTimeKind.Unspecified),
                            Dettagli = "Migliorie al sistema richiesto dal cliente",
                            OraFine = new DateTime(2024, 1, 16, 22, 0, 0, 0, DateTimeKind.Unspecified),
                            OraInizio = new DateTime(2024, 1, 16, 14, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Core.Models.VueCalEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("AllDay")
                        .HasColumnType("bit");

                    b.Property<bool?>("Background")
                        .HasColumnType("bit");

                    b.Property<string>("Class")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Deletable")
                        .HasColumnType("bit");

                    b.Property<DateTime>("End")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("FeriaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PermessoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("RendicontazioneId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("Resizable")
                        .HasColumnType("bit");

                    b.Property<string>("Split")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Start")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("TrasfertaId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("FeriaId");

                    b.HasIndex("PermessoId");

                    b.HasIndex("RendicontazioneId");

                    b.HasIndex("TrasfertaId");

                    b.ToTable("Eventi");

                    b.HasData(
                        new
                        {
                            Id = new Guid("dd00d06c-dd44-49a0-b2c2-3e6150f808b7"),
                            AllDay = false,
                            Background = false,
                            Class = "rendicontazione",
                            Deletable = false,
                            End = new DateTime(2024, 1, 8, 13, 0, 0, 0, DateTimeKind.Unspecified),
                            RendicontazioneId = new Guid("5ce24d8d-38d4-4efe-b53e-2f82c236bb35"),
                            Resizable = false,
                            Split = "",
                            Start = new DateTime(2024, 1, 8, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Rendicontazione"
                        },
                        new
                        {
                            Id = new Guid("69cc76c3-2e50-4905-8b65-5c7b035108f1"),
                            AllDay = false,
                            Background = false,
                            Class = "rendicontazione",
                            Deletable = false,
                            End = new DateTime(2024, 1, 8, 18, 0, 0, 0, DateTimeKind.Unspecified),
                            RendicontazioneId = new Guid("b3ca179a-d061-4fb9-a3db-fc9a5154b61b"),
                            Resizable = false,
                            Split = "",
                            Start = new DateTime(2024, 1, 8, 14, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Rendicontazione"
                        },
                        new
                        {
                            Id = new Guid("ed4e60ed-10c0-4ce4-a169-7914104349cf"),
                            AllDay = false,
                            Background = false,
                            Class = "rendicontazione",
                            Deletable = false,
                            End = new DateTime(2024, 1, 9, 13, 0, 0, 0, DateTimeKind.Unspecified),
                            RendicontazioneId = new Guid("dad29b8d-9c34-4721-81f2-e289c3c82633"),
                            Resizable = false,
                            Split = "",
                            Start = new DateTime(2024, 1, 9, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Rendicontazione"
                        },
                        new
                        {
                            Id = new Guid("c9490559-bf12-4d93-878f-f3226b2143e0"),
                            AllDay = false,
                            Background = false,
                            Class = "rendicontazione",
                            Deletable = false,
                            End = new DateTime(2024, 1, 9, 18, 0, 0, 0, DateTimeKind.Unspecified),
                            RendicontazioneId = new Guid("5ffb43c1-9bd0-4752-951b-508f2293b7a6"),
                            Resizable = false,
                            Split = "",
                            Start = new DateTime(2024, 1, 9, 14, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Rendicontazione"
                        },
                        new
                        {
                            Id = new Guid("ec5ea470-d727-41d2-9759-cf4a89c7020b"),
                            AllDay = false,
                            Background = false,
                            Class = "trasferta",
                            Deletable = false,
                            End = new DateTime(2024, 1, 16, 22, 0, 0, 0, DateTimeKind.Unspecified),
                            Resizable = false,
                            Split = "",
                            Start = new DateTime(2024, 1, 16, 14, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Trasferta",
                            TrasfertaId = new Guid("c08e3de1-e26b-4f01-81f0-fbca477186e3")
                        },
                        new
                        {
                            Id = new Guid("949ff5fa-94a3-46ca-9003-83dcd3fceb46"),
                            AllDay = false,
                            Background = false,
                            Class = "permesso",
                            Deletable = false,
                            End = new DateTime(2024, 1, 15, 16, 0, 0, 0, DateTimeKind.Unspecified),
                            PermessoId = new Guid("eea1f511-111c-41a6-9905-c3b06b88c952"),
                            Resizable = false,
                            Split = "",
                            Start = new DateTime(2024, 1, 15, 14, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Permesso"
                        },
                        new
                        {
                            Id = new Guid("0bcda651-a068-4bda-9e1b-b8704fbe765e"),
                            AllDay = true,
                            Background = false,
                            Class = "libero",
                            Deletable = false,
                            End = new DateTime(2024, 1, 19, 23, 59, 0, 0, DateTimeKind.Unspecified),
                            FeriaId = new Guid("1b75d75e-b75a-41d4-bbad-d2b2622b8dd3"),
                            Resizable = false,
                            Split = "",
                            Start = new DateTime(2024, 1, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Vacanze"
                        });
                });

            modelBuilder.Entity("Core.Services.Shared.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NickName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3de6883f-9a0b-4667-aa53-0fbc52c4d300"),
                            Email = "email1@test.it",
                            FirstName = "Nome1",
                            LastName = "Cognome1",
                            NickName = "Nickname1",
                            Password = "M0Cuk9OsrcS/rTLGf5SY6DUPqU2rGc1wwV2IL88GVGo="
                        },
                        new
                        {
                            Id = new Guid("a030ee81-31c7-47d0-9309-408cb5ac0ac7"),
                            Email = "email2@test.it",
                            FirstName = "Nome2",
                            LastName = "Cognome2",
                            NickName = "Nickname2",
                            Password = "Uy6qvZV0iA2/drm4zACDLCCm7BE9aCKZVQ16bg80XiU="
                        },
                        new
                        {
                            Id = new Guid("bfdef48b-c7ea-4227-8333-c635af267354"),
                            Email = "email3@test.it",
                            FirstName = "Nome3",
                            LastName = "Cognome3",
                            NickName = "Nickname3",
                            Password = "Uy6qvZV0iA2/drm4zACDLCCm7BE9aCKZVQ16bg80XiU="
                        });
                });

            modelBuilder.Entity("Core.Models.VueCalEvent", b =>
                {
                    b.HasOne("Core.Models.Feria", "Feria")
                        .WithMany()
                        .HasForeignKey("FeriaId");

                    b.HasOne("Core.Models.Permesso", "Permesso")
                        .WithMany()
                        .HasForeignKey("PermessoId");

                    b.HasOne("Core.Models.Rendicontazione", "Rendicontazione")
                        .WithMany()
                        .HasForeignKey("RendicontazioneId");

                    b.HasOne("Core.Models.Trasferta", "Trasferta")
                        .WithMany()
                        .HasForeignKey("TrasfertaId");

                    b.Navigation("Feria");

                    b.Navigation("Permesso");

                    b.Navigation("Rendicontazione");

                    b.Navigation("Trasferta");
                });
#pragma warning restore 612, 618
        }
    }
}
