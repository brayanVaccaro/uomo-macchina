// <auto-generated />
using System;
using Core.Services;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Core.Migrations
{
    [DbContext(typeof(TemplateDbContext))]
    [Migration("20240206112529_AddTablesAndModelSeedData")]
    partial class AddTablesAndModelSeedData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Core.Models.Feria", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataFine")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataInizio")
                        .HasColumnType("datetime2");

                    b.Property<string>("Dettagli")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Durata")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Ferie");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9faca2a8-9860-4d4a-8437-1e23da75a688"),
                            DataFine = new DateTime(2024, 2, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataInizio = new DateTime(2024, 2, 1, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            Dettagli = "Dettagli di Ferie",
                            Durata = 60
                        });
                });

            modelBuilder.Entity("Core.Models.NotteFuori", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Commessa")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Data")
                        .HasColumnType("datetime2");

                    b.Property<string>("Dettagli")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TipoViaggio")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("NottiFuori");
                });

            modelBuilder.Entity("Core.Models.Permesso", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Data")
                        .HasColumnType("datetime2");

                    b.Property<string>("Dettagli")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Durata")
                        .HasColumnType("int");

                    b.Property<DateTime>("OraFine")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("OraInizio")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Permessi");

                    b.HasData(
                        new
                        {
                            Id = new Guid("861ad4a1-fa3a-4b53-b3be-513ee2899e98"),
                            Data = new DateTime(2024, 1, 29, 14, 0, 0, 0, DateTimeKind.Unspecified),
                            Dettagli = "Dettagli di permesso",
                            Durata = 180,
                            OraFine = new DateTime(2024, 1, 29, 17, 0, 0, 0, DateTimeKind.Unspecified),
                            OraInizio = new DateTime(2024, 1, 29, 14, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Core.Models.Rendicontazione", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Commessa")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Data")
                        .HasColumnType("datetime2");

                    b.Property<string>("Dettagli")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OraFine")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("OraInizio")
                        .HasColumnType("datetime2");

                    b.Property<int>("OreTotali")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Rendicontazioni");

                    b.HasData(
                        new
                        {
                            Id = new Guid("48bb0cab-f465-4379-b51f-c4674b2cbc8e"),
                            Commessa = "Commessa di rendicontazione",
                            Data = new DateTime(2024, 1, 29, 8, 30, 0, 0, DateTimeKind.Unspecified),
                            Dettagli = "Dettagli di Rendicontazioni",
                            OraFine = new DateTime(2024, 1, 29, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            OraInizio = new DateTime(2024, 1, 29, 8, 30, 0, 0, DateTimeKind.Unspecified),
                            OreTotali = 8
                        });
                });

            modelBuilder.Entity("Core.Models.Rimborso", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("CartaAziendale")
                        .HasColumnType("bit");

                    b.Property<string>("Commessa")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Data")
                        .HasColumnType("datetime2");

                    b.Property<string>("Dettagli")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Importo")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Rimborsi");
                });

            modelBuilder.Entity("Core.Models.Trasferta", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("AutoAziendale")
                        .HasColumnType("bit");

                    b.Property<int>("Chilometri")
                        .HasColumnType("int");

                    b.Property<string>("Commessa")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DataFine")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataInizio")
                        .HasColumnType("datetime2");

                    b.Property<string>("Dettagli")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Trasferte");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5e3a71eb-0b15-4d67-bd42-d7cd9e088b97"),
                            AutoAziendale = false,
                            Chilometri = 200,
                            Commessa = "Commessa di Trasferte",
                            DataFine = new DateTime(2024, 1, 28, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            DataInizio = new DateTime(2024, 1, 27, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            Dettagli = "Dettagli di Trasferte"
                        });
                });

            modelBuilder.Entity("Core.Models.VueCalEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("AllDay")
                        .HasColumnType("bit");

                    b.Property<bool?>("Background")
                        .HasColumnType("bit");

                    b.Property<string>("Class")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Deletable")
                        .HasColumnType("bit");

                    b.Property<DateTime>("End")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("Resizable")
                        .HasColumnType("bit");

                    b.Property<string>("Split")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Start")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Eventi");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ade64e9f-9e64-4ff3-ad44-931c1732b958"),
                            AllDay = false,
                            Background = false,
                            Class = "rendicontazione",
                            Deletable = false,
                            End = new DateTime(2024, 1, 29, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            Resizable = false,
                            Split = "",
                            Start = new DateTime(2024, 1, 29, 8, 30, 0, 0, DateTimeKind.Unspecified),
                            Title = "Prova rendicontazione"
                        },
                        new
                        {
                            Id = new Guid("b88501c5-5425-43f2-864f-8b78960614d6"),
                            AllDay = false,
                            Background = false,
                            Class = "permesso",
                            Deletable = false,
                            End = new DateTime(2024, 1, 29, 17, 0, 0, 0, DateTimeKind.Unspecified),
                            Resizable = false,
                            Split = "",
                            Start = new DateTime(2024, 1, 29, 14, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Prova permesso"
                        },
                        new
                        {
                            Id = new Guid("0b245e2d-c498-4791-aa53-68f3b6fa8385"),
                            AllDay = false,
                            Background = false,
                            Class = "trasferta",
                            Deletable = false,
                            End = new DateTime(2024, 1, 28, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            Resizable = false,
                            Split = "",
                            Start = new DateTime(2024, 1, 27, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Prova trasferta"
                        },
                        new
                        {
                            Id = new Guid("f0df5649-43cf-46a8-a78f-2c285b317fc6"),
                            AllDay = false,
                            Background = false,
                            Class = "straordinario",
                            Deletable = false,
                            End = new DateTime(2024, 1, 29, 22, 0, 0, 0, DateTimeKind.Unspecified),
                            Resizable = false,
                            Split = "",
                            Start = new DateTime(2024, 1, 29, 19, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Prova straordinario"
                        },
                        new
                        {
                            Id = new Guid("71e57f32-c4a9-4a31-96e3-542bec3454b8"),
                            AllDay = true,
                            Background = true,
                            Class = "libero",
                            Deletable = false,
                            End = new DateTime(2024, 2, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Resizable = false,
                            Split = "",
                            Start = new DateTime(2024, 2, 1, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Prova feria"
                        });
                });

            modelBuilder.Entity("Core.Services.Shared.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NickName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3de6883f-9a0b-4667-aa53-0fbc52c4d300"),
                            Email = "email1@test.it",
                            FirstName = "Nome1",
                            LastName = "Cognome1",
                            NickName = "Nickname1",
                            Password = "M0Cuk9OsrcS/rTLGf5SY6DUPqU2rGc1wwV2IL88GVGo="
                        },
                        new
                        {
                            Id = new Guid("a030ee81-31c7-47d0-9309-408cb5ac0ac7"),
                            Email = "email2@test.it",
                            FirstName = "Nome2",
                            LastName = "Cognome2",
                            NickName = "Nickname2",
                            Password = "Uy6qvZV0iA2/drm4zACDLCCm7BE9aCKZVQ16bg80XiU="
                        },
                        new
                        {
                            Id = new Guid("bfdef48b-c7ea-4227-8333-c635af267354"),
                            Email = "email3@test.it",
                            FirstName = "Nome3",
                            LastName = "Cognome3",
                            NickName = "Nickname3",
                            Password = "Uy6qvZV0iA2/drm4zACDLCCm7BE9aCKZVQ16bg80XiU="
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
